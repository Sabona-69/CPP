#ifndef FIXED_HPP
# define FIXED_HPP

#include <iostream>
#include <cmath>

class Fixed{
    private:
        int                fixedNumber;
        static const int    frac;
    public:
        Fixed();
        Fixed(const Fixed& inst);
        ~Fixed();
        Fixed& operator=(const Fixed& inst);
        int getRawBite( void ) const;
        void setRawBite( int const raw ) ;
};

#endif

#include "Fixed.hpp"

// Fixed::frac =8;

Fixed::Fixed(){
    this->fixedNumber = 0;
    std::cout << "Default  constuctor called !" << std::endl;
}

Fixed::~Fixed(){
    std::cout << "Default  destuctor called !" << std::endl;
}

Fixed::Fixed(const Fixed& inst){
    std::cout << "Copy constuctor called !" << std::endl;
}

Fixed::Fixed& operator=(const Fixed& inst){
    std::cout << "Copy assignement operator called !" << std::endl;
    setRawBite(inst.getRawBite());
}

Fixed::int getRawBite() const{
    std::cout << "getRawBite member function called !" << std::endl;
    return fixedNumber;
}

Fixed::void setRawBite(const const raw) {
    std::cout << "setRawBite member function called !" << std::endl;
    fixedNumber = raw;
}


int main( void ) {
  Fixed a;
  Fixed b( a );
  Fixed c;

    c = b;
    std::cout << a.getRawBits() << std::endl;
    std::cout << b.getRawBits() << std::endl;
    std::cout << c.getRawBits() << std::endl;
    return 0;
 // !FIXED_HPP
}
