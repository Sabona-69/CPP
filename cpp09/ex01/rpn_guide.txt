RPN Calculator - Exercise 01 Guide
==================================

Overview:
This exercise requires implementing a Reverse Polish Notation (RPN) calculator. 
RPN is a mathematical notation in which every operator follows all of its operands. 
It is also known as postfix notation.

Example:
Infix: (1 + 2) * 4 -> Postfix/RPN: 1 2 + 4 *

How RPN Works:
1. Numbers are pushed onto a stack
2. When an operator is encountered, it pops the required operands from the stack
3. Performs the operation and pushes the result back onto the stack
4. Final result is the only number left on the stack

File Structure:
You should create the following files:
1. RPN.hpp - Class declaration
2. RPN.cpp - Class implementation
3. main.cpp - Contains main function

Step-by-Step Implementation Guide:

Step 1: Update RPN.hpp
----------------------
Add these includes: #include <stack>, #include <string>, #include <stdexcept>

Add private member: std::stack<int> stack;

Add public method: int calculate(const std::string& expression);

Your header should look like:
```cpp
#ifndef RPN_HPP
#define RPN_HPP

#include <iostream>
#include <stack>
#include <string>
#include <stdexcept>

class RPN {
    private:
        std::stack<int> stack;
    public:
        RPN();
        ~RPN();
        RPN(const RPN &assign);
        RPN& operator=(const RPN &assign);
        int calculate(const std::string& expression);
};

#endif
```

Step 2: Update RPN.cpp
---------------------
- Implement constructors/destructors (can be empty or just call parent)
- Implement assignment operator (just return *this, or handle stack copying)
- Implement calculate method with this algorithm:
  1. Parse the input string character by character (or token by token)
  2. If it's a digit, push it to the stack
  3. If it's an operator (+, -, *, /):
     - Check if at least 2 elements are on stack (throw error if not)
     - Pop last 2 elements (first pop is right operand, second is left)
     - Perform operation
     - Push result back to stack
  4. After processing, if stack has exactly 1 element, return it
  5. Otherwise, throw an error (malformed expression)

Step 3: Create main.cpp
----------------------
- Take input expression as command line argument
- Validate there's exactly one argument
- Create RPN object
- Call calculate method and print result
- Handle exceptions properly

Step 4: Error Handling
---------------------
The program should handle these error conditions:
1. Invalid input characters (not digits, operators, or spaces)
2. Insufficient operands (e.g. "4 +")
3. Too many operands (e.g. "4 5 + 6")
4. Division by zero
5. Invalid expressions (anything that doesn't make sense)

Step 5: Algorithm Details
------------------------
For the calculation algorithm:
1. Process the input string token by token
2. For each token:
   - If it's a digit (0-9), push it to stack
   - If it's an operator:
     * Check if stack has at least 2 elements, throw error if not
     * Pop two elements (right operand first, then left operand)
     * Perform operation
     * Push result back to stack
3. After processing all tokens, check if stack has exactly one element
4. Return that element as result

Step 6: Operator Implementation
-------------------------------
- Addition: left + right
- Subtraction: left - right
- Multiplication: left * right
- Division: left / right (with division-by-zero check)

Step 7: Testing
---------------
Test with these cases:
- "8 9 * 9 - 9 * 4 /" (should result in 153)
- "7 7 * 7 -" (should result in 42)
- "2 2 +" (should result in 4)
- "4 2 /" (should result in 2)
- "4 0 /" (should throw division by zero error)
- "4 2 +" (should result in 6)
- "4 2 + 3 -" (should result in 3)
- "" (empty string - should throw error)
- "abc" (invalid input - should throw error)
- "4 2" (not enough operators - should throw error)
- "4 2 +" (valid with additional numbers - should throw error)
- "4 + 2" (infix - should throw error)

Key Constraints:
1. Only accept single digits (0-9) and operators (+, -, *, /)
2. Accept spaces as separators
3. Follow C++98 standard
4. Proper error handling with std::runtime_error
5. No undefined behavior (especially for division by zero)

Example Usage:
./RPN "8 9 * 9 - 9 * 4 /" => 153
./RPN "7 7 * 7 -" => 42
./RPN "4 2 +" => 6

Remember to follow the 42 coding standards and implement proper copy semantics.