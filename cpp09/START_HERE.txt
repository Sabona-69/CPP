╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║              CPP09 TESTING SUITE - CREATED FILES              ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝


📂 cpp09/
├── 🔧 EXECUTABLE TEST SCRIPTS
│   ├── test_all.sh              ⭐ Main automated test suite
│   ├── tricky_tests.sh          ⭐ Edge cases & permission tests
│   └── run_tests.py             ⭐ Python-based test runner
│
├── 📖 DOCUMENTATION FILES
│   ├── INDEX.md                 📌 Start here - navigation guide
│   ├── README_TESTS.md          📌 Main testing documentation
│   ├── TESTING_GUIDE.md         📋 Complete manual test guide
│   ├── TRICKY_TESTS.md          🎯 Advanced edge cases
│   ├── MANUAL_TEST_COMMANDS.txt 📝 Copy-paste commands
│   ├── QUICK_REFERENCE.txt      ⚡ Quick reference card
│   └── TEST_FILES_SUMMARY.txt   📊 Package summary
│
└── 💼 EXERCISE DIRECTORIES
    ├── ex00/ (BitcoinExchange)
    ├── ex01/ (RPN Calculator)
    └── ex02/ (PmergeMe)


═══════════════════════════════════════════════════════════════
                    🚀 QUICK START GUIDE
═══════════════════════════════════════════════════════════════

Step 1: Choose Your Approach
┌───────────────────────────────────────────────────────────┐
│ Option A: Full Automation                                 │
│   $ chmod +x test_all.sh                                  │
│   $ ./test_all.sh                                         │
└───────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────┐
│ Option B: Edge Cases Only                                 │
│   $ chmod +x tricky_tests.sh                              │
│   $ ./tricky_tests.sh                                     │
└───────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────┐
│ Option C: Python Runner                                   │
│   $ python3 run_tests.py                                  │
└───────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────┐
│ Option D: Manual Testing                                  │
│   $ cat MANUAL_TEST_COMMANDS.txt                          │
│   (then copy-paste commands)                              │
└───────────────────────────────────────────────────────────┘

Step 2: Review Results
  - Check for compilation errors
  - Verify valid inputs work
  - Ensure invalid inputs show errors
  - No segfaults or memory leaks


═══════════════════════════════════════════════════════════════
                    📊 TEST COVERAGE
═══════════════════════════════════════════════════════════════

Exercise 00: BitcoinExchange                      [~30 tests]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✓ Valid date/value pairs
✓ Invalid dates (month, day, year)
✓ Leap year validation (2000✓, 1900✗, 2020✓, 2021✗)
✓ Month-specific days (Feb 31✗, Apr 31✗, Jan 31✓)
✓ Value boundaries (0✓, 1000✓, -1✗, 1001✗)
✓ File I/O errors
✓ Permission tests
✓ Format validation

Exercise 01: RPN Calculator                       [~25 tests]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✓ Single digits (0-9) ✓
✗ Multi-digit (10, 99) - MUST FAIL ⚠️
✓ All operators (+, -, *, /)
✓ Division by zero detection
✓ Stack validation
✓ Integer division
✓ Complex expressions (8 9 * 9 - ... = 42)
✓ Invalid characters

Exercise 02: PmergeMe                             [~20 tests]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✓ Simple/complex sequences
✓ Already/reverse sorted
✓ Single/two elements
✓ Duplicates
✓ Large numbers (INT_MAX)
✓ Zero values
✓ Performance tests (1000+ elements)
✗ Negative/float numbers - MUST FAIL
✗ Non-numeric input - MUST FAIL

                      TOTAL: ~75 TEST CASES


═══════════════════════════════════════════════════════════════
                    ⚠️  CRITICAL POINTS
═══════════════════════════════════════════════════════════════

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Ex01: ONLY SINGLE DIGITS (0-9) ALLOWED                    ┃
┃                                                            ┃
┃ ✓ ./RPN "0 1 +"      → Works                              ┃
┃ ✓ ./RPN "9 9 +"      → Works                              ┃
┃ ✗ ./RPN "10 2 +"     → MUST FAIL ⚠️                       ┃
┃ ✗ ./RPN "99 1 +"     → MUST FAIL ⚠️                       ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Ex00: Leap Year Logic                                     ┃
┃                                                            ┃
┃ ✓ 2000-02-29 → Valid (divisible by 400)                   ┃
┃ ✗ 1900-02-29 → Invalid (divisible by 100 but not 400)     ┃
┃ ✓ 2020-02-29 → Valid (divisible by 4)                     ┃
┃ ✗ 2021-02-29 → Invalid (not divisible by 4)               ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Ex00: Month Day Limits                                    ┃
┃                                                            ┃
┃ Feb: 28 or 29 (leap)    ✗ 2011-02-31 → Invalid            ┃
┃ Apr, Jun, Sep, Nov: 30  ✗ 2011-04-31 → Invalid            ┃
┃ Others: 31              ✓ 2011-01-31 → Valid              ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


═══════════════════════════════════════════════════════════════
                    🎯 FILE USAGE GUIDE
═══════════════════════════════════════════════════════════════

Want to...                          Use this file:
────────────────────────────────────────────────────────────
Run tests quickly                   test_all.sh
Test edge cases                     tricky_tests.sh
Use Python                          run_tests.py
Understand what to test             README_TESTS.md
See all test cases                  TESTING_GUIDE.md
Learn about edge cases              TRICKY_TESTS.md
Copy-paste commands                 MANUAL_TEST_COMMANDS.txt
Quick lookup                        QUICK_REFERENCE.txt
Get overview                        TEST_FILES_SUMMARY.txt
Navigate files                      INDEX.md (this file)


═══════════════════════════════════════════════════════════════
                    🛠️  DEBUGGING COMMANDS
═══════════════════════════════════════════════════════════════

Memory Leak Check:
┌───────────────────────────────────────────────────────────┐
│ cd ex00 && valgrind --leak-check=full ./btc test.txt     │
│ cd ex01 && valgrind --leak-check=full ./RPN "1 2 +"      │
│ cd ex02 && valgrind --leak-check=full ./PmergeMe 3 5 9   │
└───────────────────────────────────────────────────────────┘

Compilation Test:
┌───────────────────────────────────────────────────────────┐
│ cd ex00 && make re                                        │
│ cd ex01 && make re                                        │
│ cd ex02 && make re                                        │
└───────────────────────────────────────────────────────────┘

Clean All:
┌───────────────────────────────────────────────────────────┐
│ cd ex00 && make fclean                                    │
│ cd ex01 && make fclean                                    │
│ cd ex02 && make fclean                                    │
└───────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════
                    ✅ TESTING CHECKLIST
═══════════════════════════════════════════════════════════════

Before Submission:
□ All exercises compile without warnings (-Wall -Wextra -Werror)
□ No memory leaks (valgrind clean)
□ No segmentation faults
□ Valid inputs work correctly
□ Invalid inputs show proper errors
□ Boundary values handled correctly
□ File I/O errors handled gracefully
□ Ex01 rejects multi-digit numbers (10, 99, etc.)
□ Ex00 validates dates correctly (leap years, month days)
□ Ex02 sorts correctly in all cases
□ Performance acceptable for large inputs (Ex02)
□ Output format matches requirements
□ Return values correct (0 success, 1 error)


═══════════════════════════════════════════════════════════════
                    📝 NOTES
═══════════════════════════════════════════════════════════════

• All tests work WITHOUT modifying any code
• Tests focus on validation, NOT implementation
• Permission tests require chmod capability
• Some tests may vary on different systems
• All assume standard C++98 behavior
• Comprehensive but not exhaustive
• Feel free to add your own tests


═══════════════════════════════════════════════════════════════
                    🎉 YOU'RE READY!
═══════════════════════════════════════════════════════════════

                        Start testing with:

                    $ chmod +x test_all.sh
                    $ ./test_all.sh

                    Or read documentation:

                    $ cat README_TESTS.md


                        GOOD LUCK! 🚀


═══════════════════════════════════════════════════════════════
