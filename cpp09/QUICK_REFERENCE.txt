┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                   CPP09 QUICK REFERENCE                       ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┌─────────────────────────────────────────────────────────────┐
│ EXERCISE 00: BitcoinExchange                                 │
└─────────────────────────────────────────────────────────────┘

Usage:      ./btc input_file.txt
Requires:   data.csv (database file)

Input Format:
  date | value
  YYYY-MM-DD | number

Valid Values:   0 to 1000 (inclusive)
Valid Dates:    Proper calendar dates with leap year support

Quick Tests:
  # Valid
  echo -e "date | value\n2011-01-03 | 3" | ./btc /dev/stdin
  
  # Invalid month
  echo -e "date | value\n2011-13-03 | 3" | ./btc /dev/stdin
  
  # Negative (error)
  echo -e "date | value\n2011-01-03 | -1" | ./btc /dev/stdin
  
  # Over 1000 (error)
  echo -e "date | value\n2011-01-03 | 1001" | ./btc /dev/stdin

Must Test:
  ✓ Feb 31 → ERROR
  ✓ Apr 31 → ERROR  
  ✓ 2020-02-29 → OK (leap year)
  ✓ 2021-02-29 → ERROR (not leap year)
  ✓ Value -1 → ERROR
  ✓ Value 1001 → ERROR

┌─────────────────────────────────────────────────────────────┐
│ EXERCISE 01: RPN Calculator                                  │
└─────────────────────────────────────────────────────────────┘

Usage:      ./RPN "expression"
Operators:  + - * /
Numbers:    **ONLY SINGLE DIGITS 0-9**

Quick Tests:
  # Valid
  ./RPN "3 4 +"              # → 7
  ./RPN "9 3 /"              # → 3
  ./RPN "0 1 +"              # → 1
  ./RPN "9 9 +"              # → 18
  
  # Invalid (multi-digit)
  ./RPN "10 2 +"             # → ERROR
  ./RPN "99 1 +"             # → ERROR
  
  # Division by zero
  ./RPN "5 0 /"              # → ERROR
  
  # Not enough operands
  ./RPN "1 +"                # → ERROR

Must Test:
  ✗ 10 2 + → ERROR (multi-digit not allowed!)
  ✗ 99 1 + → ERROR (multi-digit not allowed!)
  ✓ 0-9 → All work
  ✗ 5 0 / → ERROR (division by zero)
  ✓ 5 2 / → 2 (integer division)

Famous Expression:
  ./RPN "8 9 * 9 - 9 - 9 - 4 - 1 +"  # → 42

┌─────────────────────────────────────────────────────────────┐
│ EXERCISE 02: PmergeMe                                        │
└─────────────────────────────────────────────────────────────┘

Usage:      ./PmergeMe [numbers...]
Input:      Positive integers only
Algorithm:  Ford-Johnson merge-insert sort
Containers: std::vector and std::deque

Quick Tests:
  # Valid
  ./PmergeMe 3 5 9 7 4
  ./PmergeMe 9 8 7 6 5 4 3 2 1
  ./PmergeMe 0 5 3 8 1
  ./PmergeMe 42
  
  # Invalid
  ./PmergeMe 1 -2 3          # → ERROR (negative)
  ./PmergeMe 1 2.5 3         # → ERROR (float)
  ./PmergeMe                 # → ERROR (no args)

Must Test:
  ✓ Single element
  ✓ Two elements
  ✓ Already sorted
  ✓ Reverse sorted
  ✓ All same values
  ✗ Negative → ERROR
  ✗ Float → ERROR
  ✓ Zero allowed

Performance Test:
  ./PmergeMe $(shuf -i 1-1000 -n 1000 | tr '\n' ' ')

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                      MEMORY & COMPILATION                     ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Compilation Flags:
  -Wall -Wextra -Werror -std=c++98

Valgrind (Memory Leak Check):
  valgrind --leak-check=full ./btc input.txt
  valgrind --leak-check=full ./RPN "1 2 +"
  valgrind --leak-check=full ./PmergeMe 3 5 9 7 4

Clean:
  make fclean

Recompile:
  make re

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                       TEST SCRIPTS                            ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Full Test Suite:
  chmod +x test_all.sh && ./test_all.sh

Tricky Tests:
  chmod +x tricky_tests.sh && ./tricky_tests.sh

Python Tests:
  python3 run_tests.py

Manual Commands:
  cat MANUAL_TEST_COMMANDS.txt

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                      COMMON ERRORS                            ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Ex00:
  "Error: could not open file."
    → Missing file or no read permission
  
  "Error: bad input => ..."
    → Invalid date format or delimiter
  
  "Error: not a positive number."
    → Negative value
  
  "Error: too large a number."
    → Value over 1000

Ex01:
  "Invalid number of arguments."
    → Need exactly 1 argument
  
  "Invalid character in the input."
    → Non-digit, non-operator, non-space character
    OR multi-digit number (10, 99, etc.)
  
  "Division by zero."
    → Attempted division by 0
  
  "The user input not valid."
    → Stack doesn't have exactly 1 value at end

Ex02:
  "Error: Not enough arguments"
    → Need at least 1 number
  
  "Error: ..."
    → Invalid input (negative, float, non-numeric)

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                    CRITICAL REMINDERS                         ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

⚠️  Ex01: ONLY SINGLE DIGITS 0-9 ARE ALLOWED!
    10, 99, 123, etc. MUST be rejected!

⚠️  Ex00: Leap Year Rules
    - Divisible by 4: leap year
    - EXCEPT divisible by 100: not leap year  
    - EXCEPT divisible by 400: leap year
    Examples: 2000✓ 1900✗ 2020✓ 2021✗

⚠️  Ex00: Month Day Limits
    - Feb: 28 or 29 (leap year)
    - Apr, Jun, Sep, Nov: 30
    - Jan, Mar, May, Jul, Aug, Oct, Dec: 31

⚠️  Ex02: Only Positive Integers
    No negative, no floats, no strings

⚠️  All: No Memory Leaks
    Test with valgrind!

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                    ONE-LINER TESTS                            ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

Ex00:
  cd ex00 && make && echo -e "date | value\n2011-01-03 | 3" > t.txt && ./btc t.txt

Ex01:
  cd ex01 && make && ./RPN "3 4 +" && ./RPN "10 2 +"

Ex02:
  cd ex02 && make && ./PmergeMe 3 5 9 7 4 && ./PmergeMe 1 -2 3

All Tests:
  chmod +x test_all.sh && ./test_all.sh

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                    TEST DOCUMENTATION                         ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

README_TESTS.md          → Start here (overview)
TESTING_GUIDE.md         → Complete test guide
TRICKY_TESTS.md          → Edge cases explained
MANUAL_TEST_COMMANDS.txt → Copy-paste commands
TEST_FILES_SUMMARY.txt   → File descriptions
QUICK_REFERENCE.txt      → This file

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                         GOOD LUCK!                            ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
