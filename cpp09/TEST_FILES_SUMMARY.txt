═══════════════════════════════════════════════════════════════
    CPP09 TESTING SUITE - COMPLETE PACKAGE
═══════════════════════════════════════════════════════════════

📦 CREATED FILES
════════════════════════════════════════════════════════════════

1. test_all.sh              - Comprehensive automated test script
2. tricky_tests.sh          - Permission and edge case tests
3. run_tests.py             - Python-based test runner
4. TESTING_GUIDE.md         - Complete manual testing guide
5. TRICKY_TESTS.md          - Advanced edge cases documentation
6. MANUAL_TEST_COMMANDS.txt - Copy-paste test commands
7. README_TESTS.md          - Main testing documentation
8. TEST_FILES_SUMMARY.txt   - This file

═══════════════════════════════════════════════════════════════
⚡ QUICK START
═══════════════════════════════════════════════════════════════

Option 1 - Full Automated Tests:
  $ chmod +x test_all.sh
  $ ./test_all.sh

Option 2 - Tricky Tests Only:
  $ chmod +x tricky_tests.sh
  $ ./tricky_tests.sh

Option 3 - Python Runner:
  $ python3 run_tests.py

Option 4 - Manual Step-by-Step:
  Open MANUAL_TEST_COMMANDS.txt and copy-paste

═══════════════════════════════════════════════════════════════
📋 EXERCISE SUMMARIES
═══════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────┐
│ EX00: BitcoinExchange                                        │
└─────────────────────────────────────────────────────────────┘
  • Converts bitcoin values using CSV database
  • Date format: YYYY-MM-DD
  • Value range: 0 to 1000 (inclusive)
  
  TESTS:
    ✓ Valid date/value pairs
    ✓ Invalid dates (month, day, year)
    ✓ Leap year validation
    ✓ Month-specific day limits
    ✓ Value boundaries (0, 1000)
    ✓ Negative values (error)
    ✓ Over 1000 (error)
    ✓ File permissions
    ✓ Missing files
    ✓ Invalid headers

┌─────────────────────────────────────────────────────────────┐
│ EX01: RPN Calculator                                         │
└─────────────────────────────────────────────────────────────┘
  • Reverse Polish Notation calculator
  • **ONLY accepts single digits: 0-9**
  • Operators: + - * /
  
  TESTS:
    ✓ Single digits (0-9) ✓
    ✗ Multi-digit (10, 99) - MUST FAIL
    ✓ All operators
    ✓ Division by zero detection
    ✓ Stack validation
    ✓ Integer division truncation
    ✓ Complex expressions (8 9 * 9 - ... = 42)
    ✓ Invalid operators
    ✓ Invalid characters
    ✓ Empty input

┌─────────────────────────────────────────────────────────────┐
│ EX02: PmergeMe                                               │
└─────────────────────────────────────────────────────────────┘
  • Ford-Johnson merge-insert sort
  • Uses both std::vector and std::deque
  • Positive integers only
  
  TESTS:
    ✓ Simple sequences
    ✓ Already sorted
    ✓ Reverse sorted
    ✓ Single/two elements
    ✓ Duplicates
    ✓ Large numbers (INT_MAX)
    ✓ Zero values
    ✓ Large datasets (1000+)
    ✗ Negative numbers (error)
    ✗ Float numbers (error)
    ✗ Non-numeric (error)
    ✓ Performance timing

═══════════════════════════════════════════════════════════════
🎯 CRITICAL TEST POINTS
═══════════════════════════════════════════════════════════════

EX00 Critical:
  • Leap year: 2000 ✓, 1900 ✗, 2020 ✓, 2021 ✗
  • Feb 31 ✗, Apr 31 ✗, Nov 31 ✗, Jan 31 ✓
  • Value: -1 ✗, 0 ✓, 1000 ✓, 1001 ✗

EX01 Critical:
  • 0-9 ✓, 10 ✗, 99 ✗, 123 ✗ (STRICT single digit)
  • 5 0 / ✗ (division by zero)
  • 1 2 3 + ✗ (too many operands)
  • 1 + ✗ (not enough operands)

EX02 Critical:
  • 1 -2 3 ✗ (negative)
  • 1 2.5 3 ✗ (float)
  • 0 5 3 ✓ (zero allowed)
  • 2147483647 ✓ (INT_MAX)
  • 2147483648 ✗ (over INT_MAX)

═══════════════════════════════════════════════════════════════
🔍 TRICKY EDGE CASES INCLUDED
═══════════════════════════════════════════════════════════════

Permission Tests:
  • chmod 000 data.csv
  • chmod 000 input.txt
  • Directory instead of file
  • Empty files

Date Edge Cases:
  • Year 0 and negative years
  • All month day limits (28/29/30/31)
  • Century leap years (1900, 2000, 2100)
  • Format variations (slashes vs dashes)

Value Edge Cases:
  • Floating point precision (0.0000001)
  • Just under/over limits (999.9999, 1000.0001)
  • Scientific notation (1e2, 1.5e3)

Format Edge Cases:
  • Multiple/missing spaces around pipe
  • Tab characters
  • Multiple delimiters
  • Different line endings (CR/LF/CRLF)

RPN Edge Cases:
  • Multi-space between tokens
  • Leading/trailing spaces
  • Tab characters
  • No spaces (should fail)
  • Integer overflow detection
  • 0/0, 5/0 division cases
  • Stack underflow/overflow

Sorting Edge Cases:
  • All identical values
  • Already sorted ascending
  • Reverse sorted descending
  • Sawtooth patterns (1 5 2 6 3 7)
  • Mountain patterns (1 2 3 4 3 2 1)
  • Many duplicates

═══════════════════════════════════════════════════════════════
🛠️ DEBUGGING COMMANDS
═══════════════════════════════════════════════════════════════

Memory Leak Check:
  cd ex00 && valgrind --leak-check=full ./btc test.txt
  cd ex01 && valgrind --leak-check=full ./RPN "1 2 +"
  cd ex02 && valgrind --leak-check=full ./PmergeMe 3 5 9 7 4

Compilation Check:
  cd ex00 && make re
  cd ex01 && make re
  cd ex02 && make re

Clean All:
  cd ex00 && make fclean
  cd ex01 && make fclean
  cd ex02 && make fclean

═══════════════════════════════════════════════════════════════
📊 TEST COVERAGE
═══════════════════════════════════════════════════════════════

EX00: ~30 test cases
  ├─ Valid inputs: 5 tests
  ├─ Date validation: 8 tests
  ├─ Value validation: 6 tests
  ├─ Format validation: 4 tests
  ├─ File I/O: 5 tests
  └─ Edge cases: 2+ tests

EX01: ~25 test cases
  ├─ Valid inputs: 8 tests
  ├─ Single digit enforcement: 5 tests
  ├─ Operators: 8 tests
  ├─ Stack validation: 4 tests
  └─ Edge cases: 5+ tests

EX02: ~20 test cases
  ├─ Valid inputs: 10 tests
  ├─ Input validation: 5 tests
  ├─ Performance: 3 tests
  └─ Edge cases: 5+ tests

TOTAL: ~75 test cases

═══════════════════════════════════════════════════════════════
✅ TESTING CHECKLIST
═══════════════════════════════════════════════════════════════

Before submission:
  ☐ All exercises compile without warnings
  ☐ No memory leaks (valgrind clean)
  ☐ No segmentation faults
  ☐ Valid inputs work correctly
  ☐ Invalid inputs show proper errors
  ☐ Boundary values handled correctly
  ☐ File I/O errors handled gracefully
  ☐ EX01 rejects multi-digit numbers
  ☐ EX00 validates dates correctly
  ☐ EX02 sorts correctly in all cases
  ☐ Performance acceptable for large inputs
  ☐ Output format matches requirements
  ☐ Return values correct (0 success, 1 error)

═══════════════════════════════════════════════════════════════
📖 FILE DESCRIPTIONS
═══════════════════════════════════════════════════════════════

test_all.sh
  Full automated test suite. Compiles and runs comprehensive
  tests on all three exercises. Includes basic and advanced
  tests. Best for quick validation.

tricky_tests.sh
  Focuses on edge cases and permission-based tests. Tests
  things like file permissions, leap years, multi-digit
  rejection, etc. Does not modify code.

run_tests.py
  Python-based test runner. Alternative to bash scripts.
  More readable output and easier to extend.

TESTING_GUIDE.md
  Complete manual testing guide. Contains all test cases
  with expected outputs. Use for manual testing and
  understanding what each test does.

TRICKY_TESTS.md
  Deep dive into edge cases. Explains all the tricky
  scenarios and corner cases. Use for understanding
  potential issues.

MANUAL_TEST_COMMANDS.txt
  Ready-to-copy terminal commands. Open this file and
  copy-paste commands one by one to test manually.

README_TESTS.md
  Main documentation for the testing suite. Explains
  structure, usage, and testing strategy.

═══════════════════════════════════════════════════════════════
🎓 USAGE RECOMMENDATIONS
═══════════════════════════════════════════════════════════════

For Quick Validation:
  → Use test_all.sh or run_tests.py

For Understanding:
  → Read TESTING_GUIDE.md first
  → Then read TRICKY_TESTS.md

For Manual Testing:
  → Open MANUAL_TEST_COMMANDS.txt
  → Copy and paste commands

For Edge Cases:
  → Run tricky_tests.sh
  → Review TRICKY_TESTS.md

For Debugging:
  → Check specific test in TESTING_GUIDE.md
  → Run manually with relevant flags
  → Use valgrind for memory issues

═══════════════════════════════════════════════════════════════
📞 NOTES
═══════════════════════════════════════════════════════════════

• All tests can be run without modifying any code
• Tests focus on validation, not implementation
• Permission tests require chmod capability
• Some tests may behave differently on different systems
• All tests assume standard C++98 behavior
• Tests are designed to be comprehensive but not exhaustive
• Feel free to add your own test cases

═══════════════════════════════════════════════════════════════
🎉 HAPPY TESTING!
═══════════════════════════════════════════════════════════════

All exercises should pass all tests if correctly implemented.
Good luck!
